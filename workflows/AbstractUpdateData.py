import os
from functools import cached_property

from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from utils import File, Log, Time, TimeFormat


class AbstractUpdateData:
    @property
    def id(self):
        raise NotImplementedError

    @property
    def url(self):
        raise NotImplementedError

    @cached_property
    def log(self):
        return Log(self.__class__.__name__)

    @property
    def js_path(self):
        return os.path.join('src', 'nonview', 'data', f'{self.id.upper()}.js')

    @property
    def driver(self):
        options = Options()
        options.add_argument('-headless')
        driver = webdriver.Firefox(options=options)
        driver.get(self.url)
        driver.implicitly_wait(2)

        screenshot_path = os.path.join('screenshot.odi_id_to_winner.png')
        driver.save_screenshot(screenshot_path)
        self.log.debug(f'Wrote {screenshot_path}')

        return driver

    def parse_values_list(self, driver):
        raise NotImplementedError

    @property
    def values_list(self):
        driver = self.driver

        try:
            values_list = self.parse_values_list(driver)
        except Exception as e:
            self.log.error(str(e))
            driver.quit()
            return None

        driver.quit()
        return values_list

    @property
    def header_lines(self) -> list[str]:
        timestamp = TimeFormat('%Y-%m-%d %H:%M:%S %z').stringify(Time.now())
        return [
            f'// Auto Generated by {self.id}.py',
            f'// {self.url}',
            f'// {timestamp}',
            '',
        ]

    @property
    def body_lines(self) -> list[str]:
        raise NotImplementedError

    @property
    def footer_lines(self) -> list[str]:
        return ['']

    def write(self):
        body_lines = self.body_lines
        if body_lines is None:
            self.log.warning('body_lines is None. Not writing.')
            return
        lines = self.header_lines + body_lines + self.footer_lines
        File(self.js_path).write_lines(lines)
        n_lines = len(lines)
        self.log.info(f'Wrote {n_lines} to {self.js_path}')
