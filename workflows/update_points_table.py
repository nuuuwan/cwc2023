import os

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from utils import File, Log, Time, TimeFormat

from workflows.TEAM_NAME_TO_ID import TEAM_NAME_TO_ID

URL = 'https://www.cricketworldcup.com/standings'
POINTS_TABLE_JS = os.path.join('src', 'nonview', 'data', 'POINTS_TABLE.js')


log = Log('update_points_table')


def scrape_values_list() -> list[list[str]]:
    log.debug('scrape_values_list')
    options = Options()
    options.add_argument('-headless')
    driver = webdriver.Firefox(options=options)
    driver.get(URL)
    driver.implicitly_wait(2)

    screenshot_path = os.path.join('screenshot.points_table.png')
    driver.save_screenshot(screenshot_path)
    log.debug(f'Wrote {screenshot_path}')

    try:
        table = driver.find_element(By.CLASS_NAME, 'table')
    except Exception as e:
        log.error(str(e))
        driver.quit()
        return {}

    values_list = []
    for tr in table.find_elements(By.TAG_NAME, 'tr'):
        values = [td.text for td in tr.find_elements(By.TAG_NAME, 'td')]
        if len(values) != 9:
            continue
        log.debug(str(values))
        values_list.append(values)
    driver.quit()

    return values_list


def get_points_table(values_list: list[list[str]]) -> dict[str, str]:
    log.debug('get_points_table')
    points_table = []
    for values in values_list:
        [
            rank,
            team_name,
            n_played,
            n_won,
            n_lost,
            n_no_result,
            n_tied,
            net_run_rate,
            points,
        ] = values
        points = dict(
            rank=int(rank),
            team_name=team_name,
            n_played=int(n_played),
            n_won=int(n_won),
            n_lost=int(n_lost),
            n_no_result=int(n_no_result),
            n_tied=int(n_tied),
            net_run_rate=float(net_run_rate),
            points=int(points),
        )
        log.debug(str(points))
        points_table.append(points)
    return points_table


def write(points_table: list[dict]):
    lines = []
    timestamp = TimeFormat('%Y-%m-%d %H:%M:%S').stringify(Time.now())
    lines.extend(
        [
            '// Auto Generated by update_points_table.py',
            f'// {URL}',
            f'// {timestamp}',
            '',
            'import { TEAM } from "../core/Team.js";',
            '',
        ],
    )

    lines.append('export const POINTS_TABLE = [')
    for points in points_table:
        team_id = TEAM_NAME_TO_ID[points['team_name']]
        lines.extend(
            [
                '  {',
                f'    rank: {points["rank"]},',
                f'    team: TEAM.{team_id},',
                f'    nPlayed: {points["n_played"]},',
                f'    nWon: {points["n_won"]},',
                f'    nLost: {points["n_lost"]},',
                f'    nNoResult: {points["n_no_result"]},',
                f'    nTied: {points["n_tied"]},',
                f'    netRunRate: {points["net_run_rate"]},',
                f'    points: {points["points"]},',
                '  },',
            ]
        )
    lines.extend(['];', ''])
    File(POINTS_TABLE_JS).write_lines(lines)
    n_rows = len(points_table)
    log.info(f'Wrote {n_rows} rows to {POINTS_TABLE_JS}')


def main():
    values_list = scrape_values_list()
    points_table = get_points_table(values_list)
    write(points_table)


if __name__ == '__main__':
    main()
