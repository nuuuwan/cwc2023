import os

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from utils import File, Log, Time, TimeFormat

from workflows.TEAM_NAME_TO_ID import TEAM_NAME_TO_ID

URL = 'https://www.oddsportal.com' + '/cricket/world/icc-world-cup/outrights/'
TEAM_ID_TO_P_WINNER_JS = os.path.join(
    'src', 'nonview', 'data', 'TEAM_ID_TO_P_WINNER.js'
)


log = Log('update_team_id_to_p_winner')


def scrape_values_list() -> list[list[str]]:
    log.debug('scrape_values_list')
    options = Options()
    options.add_argument('-headless')
    driver = webdriver.Firefox(options=options)
    driver.get(URL)
    driver.implicitly_wait(2)

    screenshot_path = os.path.join('screenshot.team_id_to_p_winner.png')
    driver.save_screenshot(screenshot_path)
    log.debug(f'Wrote {screenshot_path}')

    try:
        div_list = driver.find_elements(By.CLASS_NAME, 'border-gray-medium')
    except Exception as e:
        log.error(str(e))
        driver.quit()
        return {}

    values_list = []
    for div in div_list:
        values = div.text.split('\n')
        if len(values) != 3:
            continue
        log.debug(str(values))
        values_list.append(values)
    driver.quit()

    return values_list


def get_team_id_to_odds(values_list: list[list[str]]) -> dict[str, float]:
    log.debug('get_team_id_to_odds')
    team_id_to_odds = {}
    for values in values_list:
        team_name = values[0]
        team_id = TEAM_NAME_TO_ID[team_name]
        odds = float(values[2])
        team_id_to_odds[team_id] = odds
    log.info(str(team_id_to_odds))
    return team_id_to_odds


def get_team_id_to_p_winner(
    team_id_to_odds: dict[str, float]
) -> dict[str, float]:
    log.debug('get_team_id_to_p_winner')
    team_id_to_q = {}
    for team_id, odds in team_id_to_odds.items():
        team_id_to_q[team_id] = 1 / odds

    q_sum = sum(team_id_to_q.values())
    team_id_to_p_winner = {}
    for team_id, q in team_id_to_q.items():
        p = q / q_sum
        team_id_to_p_winner[team_id] = p
        log.debug(f'{team_id}: {p}')
    log.info(str(team_id_to_p_winner))
    return team_id_to_p_winner


def write(team_id_to_p_winner: dict[str, float]):
    lines = []
    timestamp = TimeFormat('%Y-%m-%d %H:%M:%S').stringify(Time.now())
    lines.extend(
        [
            '// Auto Generated by workflows/update_team_id_to_p_winner.py',
            f'// www.oddsportal.com - {timestamp}',
        ]
    )
    lines.append('export const TEAM_ID_TO_P_WINNER = {')
    for team_id, p in team_id_to_p_winner.items():
        line = f'  {team_id}: {p:.6f}, // {p:.0%}'
        log.debug(line)
        lines.append(line)
    lines.extend(['};', ''])
    File(TEAM_ID_TO_P_WINNER_JS).write_lines(lines)
    n_odds = len(team_id_to_p_winner.keys())
    log.info(f'Wrote {n_odds} probs to {TEAM_ID_TO_P_WINNER_JS}')


def main():
    values_list = scrape_values_list()
    team_id_to_odds = get_team_id_to_odds(values_list)
    if len(team_id_to_odds) == 10:
        team_id_to_p_winner = get_team_id_to_p_winner(team_id_to_odds)
        write(team_id_to_p_winner)


if __name__ == '__main__':
    main()
