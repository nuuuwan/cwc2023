import os

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from utils import File, Log, Time, TimeFormat

from workflows import odds_utils
from workflows.TEAM_NAME_TO_ID import TEAM_NAME_TO_ID

URL = 'https://www.oddsportal.com' + '/cricket/world/icc-world-cup/'
team1_id_to_team2_id_to_odds_pair_JS = os.path.join(
    'src', 'nonview', 'data', 'TEAM1_ID_TO_TEAM2_ID_TO_ODDS_PAIR.js'
)


log = Log('update_team1_id_to_team2_id_to_odds_pair')


def scrape_values_list() -> list[list[str]]:
    log.debug('scrape_values_list')
    options = Options()
    options.add_argument('-headless')
    driver = webdriver.Firefox(options=options)
    driver.get(URL)
    driver.implicitly_wait(2)

    screenshot_path = os.path.join(
        'screenshot.team1_id_to_team2_id_to_odds_pair.png'
    )
    driver.save_screenshot(screenshot_path)
    log.debug(f'Wrote {screenshot_path}')

    try:
        div_list = driver.find_elements(By.CLASS_NAME, 'border-black-borders')
    except Exception as e:
        log.error(str(e))
        driver.quit()
        return {}

    values_list = []
    for div in div_list:
        values = div.text.split('\n')
        if len(values) > 2 and values[2] == '–':
            log.debug('future: ' + str(values))
            values_list.append(values)
        elif len(values) > 3 and values[3] in [':', '–']:
            log.debug('now: ' + str(values))
            values_list.append(values)

    driver.quit()
    return values_list


def get_team1_id_to_team2_id_to_odds_pair(
    values_list: list[list[str]],
) -> dict[str, float]:
    log.debug('get_team1_id_to_team2_id_to_odds_pair')
    team1_id_to_team2_id_to_odds_pair = {}
    for values in values_list:
        if values[4] == '-':
            continue
        if values[2] == '–':
            team1_name = values[1]
            team2_name = values[3]
            odds1_str = values[4]
            odds2_str = values[5]
        elif values[3] in [':', '–']:
            team1_name = values[1]
            team2_name = values[5]
            odds1_str = values[8]
            odds2_str = values[9]
        else:
            log.error(str(values))
            raise Exception('Invalid values')

        team1_id = TEAM_NAME_TO_ID[team1_name]
        team2_id = TEAM_NAME_TO_ID[team2_name]
        team1_odds = odds_utils.parse_odds(odds1_str)
        team2_odds = odds_utils.parse_odds(odds2_str)

        if team1_odds > team2_odds:
            team2_id, team1_id = team1_id, team2_id
            team2_odds, team1_odds = team1_odds, team2_odds

        if team1_id not in team1_id_to_team2_id_to_odds_pair:
            team1_id_to_team2_id_to_odds_pair[team1_id] = {}
        team1_id_to_team2_id_to_odds_pair[team1_id][team2_id] = [
            team1_odds,
            team2_odds,
        ]

    log.info(str(team1_id_to_team2_id_to_odds_pair))
    return team1_id_to_team2_id_to_odds_pair


def write(team1_id_to_team2_id_to_odds_pair: dict[str, float]):
    lines = []
    timestamp = TimeFormat('%Y-%m-%d %H:%M:%S').stringify(Time.now())
    lines.extend(
        [
         '// Auto Generated by update_team1_id_to_team2_id_to_odds_pair.py',
            f'// {URL}',
            f'// {timestamp}',
            '',
            'import { TEAM } from "../core/Team.js";',
            '',
        ]
    )
    lines.append('export const TEAM1_ID_TO_TEAM2_ID_TO_ODDS_PAIR = {')
    for (
        team1_id,
        team2_id_to_odds_pair,
    ) in team1_id_to_team2_id_to_odds_pair.items():
        lines.append(f'  [TEAM.{team1_id}.id]: ' + '{')
        for team2_id, odds_pair in team2_id_to_odds_pair.items():
            [odds1, odds2] = odds_pair
            lines.append(
                f'    [TEAM.{team2_id}.id]: [{odds1:.2f}, {odds2:.2f}],'
            )
        lines.append('  },')

    lines.extend(['};', ''])
    File(team1_id_to_team2_id_to_odds_pair_JS).write_lines(lines)
    n_matches = len(team1_id_to_team2_id_to_odds_pair.keys())
    log.info(
        f'Wrote {n_matches} matches to {team1_id_to_team2_id_to_odds_pair_JS}'
    )


def main():
    values_list = scrape_values_list()
    team1_id_to_team2_id_to_odds_pair = get_team1_id_to_team2_id_to_odds_pair(
        values_list
    )
    write(team1_id_to_team2_id_to_odds_pair)


if __name__ == '__main__':
    main()
